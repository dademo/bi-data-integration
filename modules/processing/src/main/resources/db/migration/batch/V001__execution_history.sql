DROP TYPE IF EXISTS BATCH_STATUS CASCADE;
DROP TABLE IF EXISTS BATCH_EXECUTION_HISTORY CASCADE;
DROP TABLE IF EXISTS BATCH_EXECUTION_PROPERTY CASCADE;
DROP TABLE IF EXISTS BATCH_METRICS CASCADE;
DROP TABLE IF EXISTS BATCH_CUSTOM_METRIC CASCADE;

CREATE TYPE BATCH_STATUS AS ENUM(
    'STARTING',
    'STARTED',
    'STOPPING',
    'FAILED',
    'COMPLETED',
    'ABORTED'
);

CREATE TABLE BATCH_EXECUTION_HISTORY (
    ID              SERIAL PRIMARY KEY NOT NULL,
    BATCH_NAME      VARCHAR(255),
    BATCH_STATUS    BATCH_STATUS NOT NULL DEFAULT 'STARTING',
    BATCH_ERROR     TEXT
);

CREATE TABLE BATCH_EXECUTION_PROPERTY (
    ID              SERIAL PRIMARY KEY NOT NULL,
    BATCH_ID        INTEGER NOT NULL REFERENCES BATCH_EXECUTION_HISTORY(ID),
    PROPERTY_NAME   VARCHAR(255),
    PROPERTY_VALUE  TEXT,
    CONSTRAINT FK_BATCH_ID
        FOREIGN KEY (BATCH_ID)
        REFERENCES BATCH_EXECUTION_HISTORY(ID)
);

CREATE TABLE BATCH_METRICS (
    ID                  SERIAL PRIMARY KEY NOT NULL,
    BATCH_ID            INTEGER NOT NULL REFERENCES BATCH_EXECUTION_HISTORY(ID),
    BATCH_START         TIMESTAMP WITHOUT TIME ZONE,
    BATCH_END           TIMESTAMP WITHOUT TIME ZONE,
    BATCH_READ_COUNT    BIGINTEGER NOT NULL,
    BATCH_WRITE_COUNT   BIGINTEGER NOT NULL,
    BATCH_FILTER_COUNT  BIGINTEGER NOT NULL,
    BATCH_ERROR_COUNT   BIGINTEGER NOT NULL,
    CONSTRAINT FK_BATCH_ID
        FOREIGN KEY (BATCH_ID)
        REFERENCES BATCH_EXECUTION_HISTORY(ID)
);

CREATE TABLE BATCH_CUSTOM_METRIC (
    ID                  SERIAL PRIMARY KEY NOT NULL,
    BATCH_METRICS_ID    INTEGER NOT NULL,
    METRIC_NAME         VARCHAR(255),
    METRIC_VALUE        TEXT
    CONSTRAINT FK_BATCH_METRICS
        FOREIGN KEY (BATCH_METRICS_ID)
        REFERENCES BATCH_METRICS(ID)
)
