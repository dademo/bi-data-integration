# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - main
  - dev

jobs:
  - job: hello_world
    displayName: Hello World
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: CmdLine@2
        inputs:
          script: docker run --rm hello-world

  - job: unit_test_all
    displayName: Run all unit tests
    pool:
      vmImage: ubuntu-latest
    steps:
      # Installing Docker
      #- task: CmdLine@2
      #  inputs:
      #    script: >-
      #      sudo apt update &&
      #      sudo apt-get install ca-certificates curl gnupg lsb-release &&
      #      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&
      #      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > '/dev/null' &&
      #      sudo apt update &&
      #      sudo apt -y install docker-ce docker-ce-cli containerd.io
    
      - checkout: self
        clean: true
        lfs: true
        submodules: true
        persistCredentials: false
        enabled: true
      
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          codeCoverageToolOption: jaCoCo
          codeCoverageFailIfEmpty: true
          checkStyleRunAnalysis: true
          findBugsRunAnalysis: true
          tasks: 'build'
        enabled: true
    
